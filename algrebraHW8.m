%%  Задача 1 
% Задайте матрицу A и затем матрицу AN, содержащую компактное 
% представление A. Затем восстановите матрицу из компактного 
% вида обратно в полный.

A = [5 0 -3 0 0; 1 3 0 -1 0; 0 1 7 0 -2; 0 0 1 22 0; 0 0 0 1 8];
AN = sparse(A);
disp(AN);
B = full(AN);
disp(B);


%% Задача 2 
% Создайте матрицу A из п. 1 с помощью sparse(irow,jcol,nzer,m,n).
% Проверьте полученный результат, превратив эту матрицу обратно в полную 
% (ср. с A). посчитайте место, которое занимают в памяти полная и 
% компактная матрицы.  

A = sparse([1 2 2 3 1 3 4 2 4 5 3 5], [1 1 2 2 3 3 3 4 4 4 5 5], ...
    [5 1 3 1 -3 7 1 -1 22 1 -2 8], 5, 5);
disp(A);
B = full(A);
disp(B);
whos B A;

%% Задача 3 
% Найдите все ненулевые элементы 
% компактной матрицы AN (используя функцию find).


A = [5 0 -3 0 0; 1 3 0 -1 0; 0 1 7 0 -2; 0 0 1 22 0; 0 0 0 1 8];
disp(find(sparse(A)));

%% Задача 4
% Создайте компактный вид матрицы A (AN) в текстовом файле 
% (*.dat) и загрузите из него эту матрицу, 
% превратив её затем в полную (функции load, spconvert и full).

A1 = load('filename.dat');
A = spconvert(A1);
B = full(A);
disp(A);
disp(B);

%% Задача 5 
% Упакуйте матрицу из п. 1 по диагоналям, затем проверьте результат, 
% превратив её снова в полную.

A = [5 0 -3 0 0; 1 3 0 -1 0; 0 1 7 0 -2; 0 0 1 22 0; 0 0 0 1 8];
[B, d] = spdiags(A);
C = spdiags(B, d, 5, 5);
D = full(C);
disp(A);
disp(B);
disp(C);

%% Задача 6 
% Задайте матрицу B, затем упакуйте её двумя способами, 
% проверьте правильность упаковки, вернув из упакованного вида обратно в  
% полный, и посчитайте, сколько занимают памяти упакованная и распакованная матрицы.

B = [4 1 0 0 1 0; 1 4 1 0 0 0; 0 1 4 0 0 0; 0 0 0 4 0 1;
    1 0 0 0 4 1; 0 0 0 1 1 4];
[C, d] = spdiags(B);
D = sparse(B);
E = spdiags(C, d, 6, 6);
disp(E);
disp(D);
if E == D
    disp('Correct');
end
E2 = full(E);
D2 = full(E);
disp(E2);
disp(D2);
whos B E E2 D D2;

%% Задача 7 
% Отобразите шаблон матрицы B из п.6, используя функцию spy.  

B = [4 1 0 0 1 0; 1 4 1 0 0 0; 0 1 4 0 0 0; 0 0 0 4 0 1;
    1 0 0 0 4 1; 0 0 0 1 1 4];
spy(B);

%% Задача 8 
% Произведите упорядочение упакованной матрицы B (symrcm) и
% восстановите полную матрицу B после упорядочения.
% Снова отобразите шаблон упорядоченной матрицы и сравните 
% с результатом из п. 7.


B = [4 1 0 0 1 0; 1 4 1 0 0 0; 0 1 4 0 0 0; 0 0 0 4 0 1;
    1 0 0 0 4 1; 0 0 0 1 1 4];
b = symrcm(sparse(B));
B2 = full(B(b, b));
disp(B2);
disp(b);
spy(C);

%% Задача 9
% Выполните разложение Холецкого матрицы B (справа) без              
% предварительного уменьшения профиля, затем                                 
% примените алгоритм Катхилла-Макки с обратным                  
% упорядочением для уменьшения профиля и сравните                    
% количество ненулевых элементов в множителях                             
% разложения Холецкого до и после применения алгоритма.

B = [7 1 1 1 1; 1 7 0 0 0; 1 0 7 0 0; 1 0 0 7 0; 1 0 0 0 7];
R = chol(B);
disp(R);
R2 = symrcm(R);
disp(R2);
[ir, jr, nz] = find(R);
[ir2, jr2, nz2] = find(R2);
if length(nz) == length(nz2)
    disp("The Same");
end